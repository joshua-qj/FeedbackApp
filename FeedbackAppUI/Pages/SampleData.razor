@page "/sampledata"
@inject IVehicleData vehicleModelData
@inject ISalespersonData salespersonData
@inject IUserData userData
@inject IFeedbackData feedbackData

<h3>SampleData</h3>

@if (vehicleModelsCreated) {
    <h4>Vehicle Models have been created</h4>
} else {
    <button class="btn btn-primary" @onclick="CreateVehicleModel">Create Vehicle Models</button>

}
@if (statusesCreated) {
    <h4>Statuses have been created</h4>
} else {
    <button class="btn btn-primary" @onclick="CreateSalespeople">Create Salespeople</button>

}
<button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>


@code {
    private bool vehicleModelsCreated = false;
    private bool statusesCreated = false;

    private async Task CreateVehicleModel() {
        var vehicleModels = await vehicleModelData.GetAllVehiclesAsync();
        if (vehicleModels?.Count > 3) {
            return;
        }
        VehicleModel model = new() {
                VehicleModelName = "Kluger",
                VehicleModelVariant = "GX"
            };
        await vehicleModelData.CreateVehicle(model);

        model = new() {
                VehicleModelName = "Hilux",
                VehicleModelVariant = "GX"
            };
        await vehicleModelData.CreateVehicle(model);
        model = new() {
                VehicleModelName = "Hiace",
                VehicleModelVariant = "GXL"
            };
        await vehicleModelData.CreateVehicle(model);
        vehicleModelsCreated = true;
    }

    private async Task CreateSalespeople() {
        var salespeople = await salespersonData.GetActiveSalespeople();
        if (salespeople?.Count > 0) {
            return;
        }
        SalespersonModel salesperson = new() {
                FirstName = "Ben",
                LastName = "Aflek"
            };
        await salespersonData.CreateSalesperson(salesperson);
        salesperson = new() {
                FirstName = "Peter",
                LastName = "Brown"
            };
        await salespersonData.CreateSalesperson(salesperson);
        salesperson = new() {
                FirstName = "John",
                LastName = "Carl"
            };
        await salespersonData.CreateSalesperson(salesperson);
        statusesCreated = true;
    }

    private async Task GenerateSampleData() {

        var vehicleModels = await vehicleModelData.GetAllVehiclesAsync();
        var salespeople = await salespersonData.GetActiveSalespeople();

        FeedbackModel feedback = new FeedbackModel() {
                FirstName = "Emma",
                LastName = "Smith",
                EmailAddress = "emma@x.com",
                Feedback = "First feedback",
                VehicleModel = vehicleModels[0],
                SalesPerson = salespeople[0],
                Rating = Rating.Excellent,
                IsContactable=true
            };
        await feedbackData.CreateFeedback(feedback);
        feedback = new FeedbackModel() {
                FirstName = "Lucy",
                LastName = "Ann",
                EmailAddress = "Lucy@x.com",
                Feedback = "Second feedback",
                VehicleModel = vehicleModels[1],
                SalesPerson = salespeople[1],
                Rating = Rating.Good,
                IsContactable = true
            };
        await feedbackData.CreateFeedback(feedback);

        feedback = new FeedbackModel() {
                FirstName = "Cathy",
                LastName = "Gray",
                EmailAddress = "Cathy@x.com",
                Feedback = "Third feedback",
                VehicleModel = vehicleModels[2],
                SalesPerson = salespeople[2],
                Rating = Rating.Poor,
            };
        await feedbackData.CreateFeedback(feedback);
    }
}
