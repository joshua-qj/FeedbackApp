@page "/"

@inject IVehicleModelData vehicleModelData
@inject IStatusData statusData
@inject IUserData userData
@inject IFeedbackData feedbackData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1>Feedbacks</h1>
<div>
    <button>Feedback</button>
</div>

<div>
    <div>
        @feedbacks?.Count Feedbacks
    </div>
    <div>
        <button @onclick="(()=>OrderByNew(true))">New</button>
        <button @onclick="(()=>OrderByNew(false))">Popular</button>
    </div>
    <div>
        <input type="text" placeholder="Search" aria-label="Search box"
               @oninput="((txt)=>OnSearchInput((string)txt.Value))" />
    </div>

</div>

<div>
    <div>
        @if (feedbacks is not null) {
            <Virtualize Items="@feedbacks" Context="f" OverscanCount="5">
                <div>
                    <div>
                        <div>
                            @GetUpvoteTopText(f)
                        </div>
                        <span class="oi oi-caret-top"></span>
                        <div>@GetUpvoteBottomText(f)</div>
                    </div>
                    <div>
                        <div @onclick="(()=>OpenDetails(f))">@f.Feedback</div>
                        <div>
                            <div @onclick="(()=>OpenDetails(f))">
                                @f.VehicleModel?.VehicleName
                            </div>
                        </div>
                        <div>
                            @f.FeedbackStatus?.StatusName
                        </div>
                    </div>

                </div>
            </Virtualize>
            @*is not paging, allow user to have a infinitely scrolling list ,
        it only render the ones on the page plus a few extra           *@
        }
    </div>
    <div>
        @if (vehicleModels is not null) {
            <div>
                <span>Vehicle Model</span>
                <div @onclick="(()=>OnVehicleModelClick())">All
            </div>
                @foreach (var m in vehicleModels) {
                    <div @onclick="(()=>OnVehicleModelClick(m.VehicleName))">@m.VehicleName</div>
                
            }
            </div>
        }
        @if (statuses is not null) {
            <div>
                <span>Status</span>
                <div @onclick="(()=>OnStatusClick())">All</div>
                @foreach (var s in statuses)
                {
                    <div @onclick="(()=>OnStatusClick(s.StatusName))">@s.StatusName</div>
                }
            </div>
            
        }
    </div>
</div>
@code {
    private List<FeedbackModel> feedbacks;
    private List<VehicleModel> vehicleModels;
    private List<StatusModel> statuses;

    private string selectedVehicleModel = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync() {
        vehicleModels = await vehicleModelData.GetAllVehicleModelsAsync();
        statuses = await statusData.GetStatuses();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await LoadFilterState(); //load data from sesstion storage, after firstrender.
            await FilterSuggestions();
            StateHasChanged();
        }
    }
    //OnAfterRenderAsync will run after the page is rendered, the page gets rendered twice in this scenario.
    // <component type="typeof(App)" render-mode="ServerPrerendered" /> at _Host.cshtml
    //render-mode="ServerPrerendered" will prerenders blazer server project on the server , so that
    //we can transmit the rendered page and then it re-render page locally(clent side), so that we can have
    //everything wired up and the benefit here is it speed up how fast the user sees something
    // on the page looks usable. so it looks usable first. and then it usable once it loads in the background
    // on the client side.

    private async Task SaveFilterState() {
        await sessionStorage.SetAsync(nameof(selectedVehicleModel), selectedVehicleModel);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }
    private async Task LoadFilterState() {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedVehicleModel));
        selectedVehicleModel = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }
    private async Task FilterSuggestions() {
        var output = await feedbackData.GetAllFeedbacks();
        if (selectedVehicleModel != "All") {
            output = output.Where(f => f.VehicleModel?.VehicleName == selectedVehicleModel).ToList();
        }
        if (selectedStatus != "All") {
            output = output.Where(f => f.FeedbackStatus?.StatusName == selectedStatus).ToList();
        }
        if (string.IsNullOrWhiteSpace(searchText) == false) {
            output = output.Where(f =>
                f.Feedback.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
            f.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        if (isSortedByNew) {
            output = output.OrderByDescending(f => f.DateCreated).ToList();
        }
        else {
            output = output.OrderByDescending(f => f.UserVotes.Count).
            ThenByDescending(f => f.DateCreated).ToList();
        }
        feedbacks = output;
        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew) {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }
    private async Task OnSearchInput(string searchInput) {
        searchText = searchInput;
        await FilterSuggestions();
    }
    private async Task OnVehicleModelClick(string vehicleModel = "All") {
        selectedVehicleModel = vehicleModel;
        await FilterSuggestions();
    }
    private async Task OnStatusClick(string status = "All") {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private string GetUpvoteTopText(FeedbackModel feedback) {
        if (feedback.UserVotes?.Count > 0) {
            return feedback.UserVotes.Count.ToString("000");
        }
        else {
            return "Click To";
        }
    }

    private string GetUpvoteBottomText(FeedbackModel feedback) {
        if (feedback.UserVotes?.Count > 1) {
            return "Upvotes";
        }
        else {
            return "Upvote";
        }
    }

    private void OpenDetails(FeedbackModel feedback) {
        navManager.NavigateTo($"/details/{feedback.Id}");
    }
}
